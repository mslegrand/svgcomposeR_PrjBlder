
##---------- category= Animate elements -----------------

 #' c("Creates an animate element which used to change an attribute over time", "animate"="The animate element is put inside a shape element and defines how an attribute of an element changes over the animation. The attribute will change from the initial value to the end value in the duration specified."),
 
##---------- category= Animation elements -----------------

 #' c("Used to move an element along a path", "animateMotion"="The animateMotion element causes a referenced element to move along a motion path."),
 #' c("Used to scale, rotate, translate and skew a shape over time", "animateTransform"="The animateTransform element animates a transformation attribute on a target element, thereby allowing animations to control translation, scaling, rotation and/or skewing."),
 #' c("Used to specify path for animateMotion", "mpath"="the mpath sub-element for the <animatemotion> element provides the ability to reference an external <path> element as the definition of a motion path."),
 #' c("Sets an attribute value at a given time", "set"="The set element provides a simple means of just setting the value of an attribute for a specified duration. It supports all attribute types, including those that cannot reasonably be interpolated, such as string and boolean values. The set element is non-additive. The additive and accumulate attributes are not allowed, and will be ignored if specified."),
 
##---------- category= Basic shape element, Graphics element, Shape elements -----------------

 #' c("", "animateColor"=""),
 #' c("Creates a circle shape", "circle"="The circle element is an SVG basic shape, used to create circles based on a center point and a radius."),
 #' c("Creates an ellipse shape", "ellipse"="The ellipse element is an SVG basic shape, used to create ellipses based on a center coordinate, and both their x and y radius."),
 #' c("Creates a line (segment) shape", "line"="The line element is an SVG basic shape, used to create a line connecting two points."),
 #' c("Creates a polygon shape", "polygon"="The polygon element defines a closed shape consisting of a set of connected straight line segments."),
 #' c("Creates a polyline (connected line segments) shape", "polyline"="The polyline element is an SVG basic shape, used to create a series of straight lines connecting several points. Typically a polyline is used to create open shapes"),
 #' c("Creates a rectangle shape", "rect"="The rect element is an SVG basic shape, used to create rectangles based on the position of a corner and their width and height. It may also be used to create rectangles with rounded corners."),
 
##---------- category= Container elements -----------------

 #' c("", "a"="Live result:"),
 #' c("Creates a marker to specify arrowheads,...", "marker"="The marker element defines the graphics that is to be used for drawing arrowheads or polymarkers on a given <path>, <line>, <polyline> or <polygon> element."),
 #' c("Creates a mask", "mask"="In SVG, you can specify that any other graphics object or <g> element can be used as an alpha mask for compositing the current object into the background. A mask is defined with the mask element. A mask is used/referenced using the mask property."),
 #' c("Specifies a pattern", "pattern"="A pattern is used to fill or stroke an object using a pre-defined graphic object which can be replicated ("tiled") at fixed intervals in x and y to cover the areas to be painted. Patterns are defined using the pattern element and then referenced by properties fill and stroke on a given graphics element to indicate that the given element shall be filled or stroked with the referenced pattern."),
 #' c("Used to render 1st child matching requirements", "switch"="The switch element evaluates the requiredFeatures, requiredExtensions and systemLanguage attributes on its direct child elements in order, and then processes and renders the first child for which these attributes evaluate to true. All others will be bypassed and therefore not rendered. If the child element is a container element such as a <g>, then the entire subtree is either processed/rendered or bypassed/not rendered."),
 
##---------- category= Container element, structural elements -----------------

 #' c("A container that groups elements together", "g"=""),
 
##---------- category= Container element, Structural elements -----------------

 #' c("Place for defining objects for later use.", "defs"="SVG allows graphical objects to be defined for later reuse. It is recommended that, wherever possible, referenced elements be defined inside of a defs element. Defining these elements inside of a defs element promotes understandability of the SVG content and thus promotes accessibility. Graphical elements defined in a defs will not be directly rendered. You can use a <use> element to render those elements wherever you want on the viewport."),
 #' c("", "svg"="Consider the following SVG image (representing the national flag of Italy):"),
 #' c("", "symbol"=""),
 
##---------- category= Descriptive elements -----------------

 #' c("Used to provide a description", "desc"="Each container element or graphics element in an SVG drawing can supply a desc description string where the description is text-only. When the current SVG document fragment is rendered as SVG on visual media, desc elements are not rendered as part of the graphics. Alternate presentations are possible, both visual and aural, which display the desc element but do not display path elements or other graphics elements. The desc element generally improve accessibility of SVG documents"),
 #' c("", "metadata"="Metadata is structured data about data. Metadata which is included with SVG content should be specified within metadata elements. The contents of the metadata should be elements from other XML namespaces such as RDF, FOAF, etc."),
 #' c("Specifies a title", "title"="Each container element or graphics element in an SVG drawing can supply a title description string where the description is text-only. When the current SVG document fragment is rendered as SVG on visual media, title element is not rendered as part of the graphics. However, some user agents may, for example, display the title element as a tooltip. Alternate presentations are possible, both visual and aural, which display the title element but do not display path elements or other graphics elements. The title element generally improve accessibility of SVG documents"),
 
##---------- category= Filter primitive elements -----------------

 #' c("A filter which allows blend of objects", "feBlend"="The feBlend filter composes two objects together ruled by a certain blending mode. This is similar to what is known from image editing software when blending two layers. The mode is defined by the mode attribute."),
 #' c("A filter used to modify a color based on a matrix", "feColorMatrix"="This filter changes colors based on a transformation matrix. Every pixel's color value (represented by an [R,G,B,A] vector) is matrix multiplied to create a new color."),
 #' c("A filter used to modify a color based on RGBA", "feComponentTransfer"="The color of each pixel is modified by changing each channel (R, G, B, and A) to the result of what the children <fefuncr>, <fefuncb>, <fefuncg>, and <fefunca> return."),
 #' c("A filter used to compose images", "feComposite"="This filter primitive performs the combination of two input images pixel-wise in image space using one of the Porter-Duff compositing operations: over, in, atop, out, xor. Additionally, a component-wise arithmetic operation (with the result clamped between [0..1]) can be applied."),
 #' c("A convolution filter used to blur, emboss, bevel, ...", "feConvolveMatrix"="the feConvolveMatrix element applies a matrix convolution filter effect. A convolution combines pixels in the input image with neighboring pixels to produce a resulting image. A wide variety of imaging operations can be achieved through convolutions, including blurring, edge detection, sharpening, embossing and beveling."),
 #' c("Filter used to specify a diffuse light source", "feDiffuseLighting"="This filter primitive lights an image using the alpha channel as a bump map. The resulting image, which is an RGBA opaque image, depends on the light color, light position and surface geometry of the input bump map."),
 #' c("Filter used to displace an image", "feDisplacementMap"="This filter primitive uses the pixels values from the image from in2 to spatially displace the image from in1."),
 #' c("Filter used to flood a region", "feFlood"="The filter fills the filter subregion with the color and opacity defined by flood-color and flood-opacity."),
 #' c("Filter used to blur an image", "feGaussianBlur"="The filter blurs the input image by the amount specified in stdDeviation, which defines the bell-curve."),
 #' c("Filter used to fetch an image", "feImage"="The feImage filter fetches image data from an external source and provides the pixel data as output (meaning, if the external source is an SVG image, it is rasterize)."),
 #' c("Filter used to merge filters", "feMerge"="The feMerge filter allows filter effects to be applied concurrently instead of sequentially. This is achieved by other filters storing their output via the result attribute and then accessing it in a <femergenode> child."),
 #' c("Filter used to erode or dilate", "feMorphology"="This filter is used to erode or dilate the input image. It's usefulness lies especially in fattening or thinning effects."),
 #' c("Filter used to offset an image", "feOffset"="The input image as a whole is offset by the values specified in the dx and dy attributes. It's used in creating drop-shadows."),
 #' c("Filter used to provide specular lighting", "feSpecularLighting"="This filter primitive lights a source graphic using the alpha channel as a bump map. The resulting image is an RGBA image based on the light color. The lighting calculation follows the standard specular component of the Phong lighting model. The resulting image depends on the light color, light position and surface geometry of the input bump map. The result of the lighting calculation is added. The filter primitive assumes that the viewer is at infinity in the z direction."),
 #' c("Filter used to tile.", "feTile"="An input image is tiled and the result used to fill a target. The effect is similar to the one of a <pattern>."),
 #' c("Filter used to create turbulence", "feTurbulence"="This filter primitive creates an image using the Perlin turbulence function. It allows the synthesis of artificial textures like clouds or marble."),
 
##---------- category= Font elements -----------------

 #' c("", "font"="The font element defines a font to be used for text layout."),
 #' c("", "font-face"="The font-face element corresponds to the CSS @font-face declaration. It defines a font's outer properties."),
 #' c("", "font-face-format"="The font-face-format element describes the type of font referenced by its parent <font-face-uri>."),
 #' c("", "font-face-src"="The font-face-src element corresponds to the src property in CSS @font-face descriptions. It serves as container for <font-face-name>, pointing to locally installed copies of this font, and <font-face-uri>, utilizing remotely defined fonts."),
 #' c("", "font-face-uri"="The font-face-uri element points to a remote definition of the current font."),
 #' c("", "hkern"="The horizontal distance between two glyphs can be fine-tweaked with an hkern Element. This process is known as Kerning."),
 #' c("", "vkern"="The vertical distance between two glyphs in top-to-bottom fonts can be fine-tweaked with an vkern Element. This process is known as Kerning."),
 
##---------- category= Gradient elements -----------------

 #' c("", "linearGradient"="linearGradient lets authors define linear gradients to fill or stroke graphical elements."),
 #' c("", "radialGradient"="radialGradient lets authors define radial gradients to fill or stroke graphical elements."),
 #' c("", "stop"="The ramp of colors to use on a gradient is defined by the stop elements that are child elements to either the <lineargradient> element or the <radialgradient> element."),
 
##---------- category= Graphics element, Graphics referencing elements -----------------

 #' c("", "image"="The SVG Image Element (<image>) allows a raster image into be included in an SVG document."),
 
##---------- category= Graphics element, Graphics referencing element, Structural elements -----------------

 #' c("", "use"="The use element takes nodes from within the SVG document, and duplicates them somewhere else. The effect is the same as if the nodes were deeply cloned into a non-exposed DOM, and then pasted where the use element is, much like anonymous content and XBL. Since the cloned nodes are not exposed, care must be taken when using CSS to style a use element and its hidden descendants. CSS attributes are not guaranteed to be inherited by the hidden, cloned DOM unless you explicitly request it using CSS inheritance."),
 
##---------- category= Graphics element, Shape elements -----------------

 #' c("", "path"="Live result:"),
 
##---------- category= Graphics element, text content elements -----------------

 #' c("", "text"="The text element defines a graphics element consisting of text. Note that it is possible to apply a gradient, pattern, clipping path, mask or filter to text"),
 
##---------- category= Light source elements -----------------

 #' c("", "feDistantLight"="This filter primitive define a distant light source that can be used within a lighting filter primitive : <fediffuselighting> or <fespecularlighting>."),
 #' c("", "fePointLight"=" "),
 #' c("", "feSpotLight"=" "),
 
##---------- category= Text content elements -----------------

 #' c("", "altGlyphDef"="The altGlyphDef element defines a substitution representation for glyphs."),
 #' c("", "altGlyphItem"="The altGlyphItem element provides a set of candidates for glyph substitution by the <altglyph> element."),
 #' c("", "glyph"="A glyph defines a single glyph in an SVG font."),
 #' c("", "glyphRef"="The glyphRef element provides a single possible glyph to the referencing <altglyph> substitution."),
 
##---------- category= Text content element, Text content child elements -----------------

 #' c("", "altGlyph"="The altGlyph element allows sophisticated selection of the glyphs used to render its child character data."),
 #' c("", "textPath"="In addition to text drawn in a straight line, SVG also includes the ability to place text along the shape of a <path> element. To specify that a block of text is to be rendered along the shape of a <path>, include the given text within a textPath element which includes an xlink:href attribute with a reference to a <path> element."),
 #' c("", "tref"="The textual content for a <text> can be either character data directly embedded within the <text> element or the character data content of a referenced element, where the referencing is specified with a tref element."),
 #' c("", "tspan"="Within a <text> element, text and font properties and the current text position can be adjusted with absolute or relative coordinate values by including a tspan element."),
 
##---------- category= Unassigned -----------------

 #' c("", "clipPath"="The clipping path restricts the region to which paint can be applied. Conceptually, any parts of the drawing that lie outside of the region bounded by the currently active clipping path are not drawn."),
 #' c("", "color-profile"="The element allows describing the color profile used for the image."),
 #' c("", "cursor"="The cursor element can be used to define a platform-independent custom cursor. A recommended approach for defining a platform-independent custom cursor is to create a PNG image and define a cursor element that references the PNG image and identifies the exact position within the image which is the pointer position (i.e., the hot spot)."),
 #' c("", "feFuncA"="This filter primitive defines the transfer function for the alpha component of the input graphic of its parent <fecomponenttransfer> element."),
 #' c("", "feFuncB"="This filter primitive defines the transfer function for the blue component of the input graphic of its parent <fecomponenttransfer> element."),
 #' c("", "feFuncG"="This filter primitive defines the transfer function for the green component of the input graphic of its parent <fecomponenttransfer> element."),
 #' c("", "feFuncR"="This filter primitive defines the transfer function for the red component of the input graphic of its parent <fecomponenttransfer> element."),
 #' c("", "feMergeNode"="The feMergeNode takes the result of another filter to be processed by its parent <femerge>."),
 #' c("", "filter"="The filter element serves as container for atomic filter operations. It is never rendered directly. A filter is referenced by using the filter attribute on the target SVG element."),
 #' c("", "font-face-name"="The font-face-name element points to a locally installed copy of this font, identified by its name."),
 #' c("", "foreignObject"="The foreignObject element allows for inclusion of a foreign XML namespace which has its graphical content drawn by a different user agent. The included foreign graphical content is subject to SVG transformations and compositing."),
 #' c("", "missing-glyph"="The missing-glyph's content is rendered, if for a given character the font doesn't define an appropriate <glyph>."),
 #' c("", "script"="Any functions defined within any script element have a global scope across the entire current document."),
 #' c("", "style"="The style element allows style sheets to be embedded directly within SVG content. SVG's style element has the same attributes as the corresponding element in HTML (see HTML's <style> element)."),
 #' c("", "view"="A view is a defined way to view the image, like a zoom level or a detail view."),
