Currently using the following dataTables:
  AVELTable.tsv
  comboParams.tsv
  elementSummary.tsv
  elementAttrCategorySummary.tsv
  presentationAttr.tsv
  AVDTable.tsv

DOC TODOS
# 3. Add descriptions and better doc
# 4. Add notes (for handling some special requirement or restriction on element params)
# 5. Get rid of namespace warnings
# 6.
Check memory management
http://www.omegahat.org/RSXML/MemoryManagement.html


Samples:
0. on waves on click???
1. animated color to simulate moving arrows and circles 
2. animated directed graphs (lines and arrows)
3. tree graph
4. bar plot
5. sin(a+b)
6. cos triangle
7. neural net story
8. Marque

#DESIGN QUESTIONS
1. SHOULD I IMPLEMENT A SYNTAX SOMETHING LIKE
    A: doc[[id]]$add(...), or add(doc[[id]], ...)
        INSTEAD OF doc[[id]](...)
    B: IF SO, BESIDES add,  WHAT OTHER FUNCTIONALITY SHOULD I IMPLEMENT?
        i) for animation: set.color(doc[[id]], 'red', t=2), 
              or color(doc[[id]])='red',?
              or doc( id@color='red' )?
              or doc[[id]]@color='red' )?
              or tstep(doc, { color(id):='red', xy(id2) , xy(id3):=5})?
    
              need to design symbolics for (:=, =, ~, @
                a. changes immediately :=
                b. changes to from last ~
                c. relative to immediately  xy(id):=c(3,4)
                d. relative to from last    XY(id)~c(3,4)
              relative only makes sense for spatial (postion, rotation, ...)
                rotate(id) would be relative (could we even make a Rotate(id))

		what is the syntax for rotate?, i.e. we need theta from to about
		rotate(id):=30~60 @ c(10,20)
              	scale(id):=2~3 @ c(20,30)
		displayText(id):=‘this is text’ @ c(2,3)
		
        ii) set.attr0(doc[id], attr, value) for initialization
        iii) set.auto.id(doc[[id]]), so all children will get id's
        iv) get.child.id(doc[[id]], condition) 
            where condition is something like "@color=red" or taf is "rect"",...
    C: Easy call back scripts? (for plugins to talk to shiny)
    D: Canned scripts for user interacvity (move box, ...)?
    E: 

story( ), chapter, act, page


For custom controls:

http://shiny.rstudio.com/articles/building-inputs.html

http://stackoverflow.com/questions/25231016/shiny-custom-output-not-rendering

http://toddmotto.com/hacking-svg-traversing-with-ease-addclass-removeclass-toggleclass-functions/

http://stackoverflow.com/questions/8638621/jquery-svg-why-cant-i-addclass

http://shiny.rstudio.com/gallery/custom-input-control.html

http://shiny.rstudio.com/articles/building-outputs.html

----------
svg refer
http://floopily.com/blog/2012/10/25/svg-shinies-1


__________

-----------
https://github.com/donbright/font_to_svg

http://www.w3.org/TR/html4/sgml/entities.html#h-24.3
For math consider Hershey vector fonts:
  http://emergent.unpythonic.net/software/hershey
  Also check out 
  http://commons.wikimedia.org/wiki/Category:SVG_typography
Alternatively, use " Times, Helvetica and Courier 
    all support the Greek and mathematical symbols."
see
    http://www.w3.org/TR/html4/sgml/entities.html#h-24.3 (ref from http://mozilla.6506.n7.nabble.com/Symbol-font-in-SVG-td247704.html)

https://git.gnome.org/browse/lasem/ (latex to svg?)


unicode reference
http://www.ssec.wisc.edu/~tomw/java/unicode.html#x2200


For enabling dragging
http://www.codedread.com/blog/archives/2005/12/21/how-to-enable-dragging-in-svg/
http://www.petercollingridge.co.uk/interactive-svg-components/draggable-svg-element
http://svg-whiz.com/svg/DragAndDrop.svg



latex2 inkscape package
https://groups.google.com/forum/#!msg/comp.text.tex/kFUa4xUPer0/gEUxmyNrD4QJ
http://www.codecogs.com/latex/eqneditor.php
http://dvisvgm.sourceforge.net/  A fast  DVI to SVG converter
http://svgkit.sourceforge.net/SVGFontKit.html

https://groups.google.com/forum/#!msg/comp.text.tex/kFUa4xUPer0/gEUxmyNrD4QJ

To create a soft link, issue the following command from .
ln -s /home/sup/R/svgcomposeR/R svgcomposeR
------------

#For testing:
R -e "shiny::runApp('~/shinyapp')"


https://gist.github.com/trestletech/5948876
_________

ToCheck

same elements?
same attributes?
for each element, same attributes?
same values?
for each attribute, same values?



#Done
# X 1. make a dot alias for all fns with dash, ie  make font.face for "font-face" (already done for attributes)
#  X 3. if an attr is unnamed but of class list,  promote it's members as children.
#   a. collect all unamed args which are themselfs a list, unL
#   b. remove unl from args and promote each member to attr (shall this be recursive??)
#   c. .children will be unamed args that are either character or numeric or xmlNode

#todo 

# 3. Add a copy fn to copy to Composer Project (or make a link)
# 4. Add a getAttribValue(doc, id) (or getAttr(id) inside of doc???)

#todo:
# ?  change project name from svgCreator to svgComposer
# ?2. make a default for c(x,y) to be space seperated (check to see if this is already the case)
# ?4. What happens to a non-list (vector) that should be ws seperated (or sc or cl ...)?
# 5. Add function completions HOW???
# 6. Add documentation HOW???
# 7. Add sample programs 
# 8. Add unit testing (regression testing?) and other methods
# 9.Animation:
#    doc['initialize']
#    doc["set"]( color(id)="red", ...)
#    doc["animate"]( XY(id)=c(1,2), xy(id)=(1,2), ...)
#    or 
#    doc[[id]], replace by doc$build(rootNode=id,...) 
#           or build(doc, rootNode=id,  ...)
#           or doc$root(...)
#    doc["set"], replace by doc$set(...) or  set(doc, ...)
#    doc["animate], replace by doc$animate(...) or animate(doc, ...)

#   Do we need 
#       1. ids(doc) ? (return all ids)
#       2. def(doc) ? (return ids of defs)
#       3. svgnode(id) ?
#       4. 
#       
#todo!!! (for help docs)
# add cxy, ... and other custom attributes (i.e for gradient)
# add alias for . and - and :  elements
# add alias for . and - (and :? ) attributes
# add description
# add meaningful titles
# rename element categories (ends and refererences ending with :)
# add categories for attributes (such as presentation, ...)
# implement the name completions in .onload
# add a main category page
# add example docs
# check if we still need an alias for add attribute entry
# compare avel with attr


#todo!!! 

# write examples!!!
